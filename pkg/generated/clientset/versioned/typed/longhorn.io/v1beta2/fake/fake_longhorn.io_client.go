/*
Copyright 2025 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package fake

import (
	v1beta2 "github.com/harvester/node-disk-manager/pkg/generated/clientset/versioned/typed/longhorn.io/v1beta2"
	rest "k8s.io/client-go/rest"
	testing "k8s.io/client-go/testing"
)

type FakeLonghornV1beta2 struct {
	*testing.Fake
}

func (c *FakeLonghornV1beta2) BackingImages(namespace string) v1beta2.BackingImageInterface {
	return newFakeBackingImages(c, namespace)
}

func (c *FakeLonghornV1beta2) BackingImageDataSources(namespace string) v1beta2.BackingImageDataSourceInterface {
	return newFakeBackingImageDataSources(c, namespace)
}

func (c *FakeLonghornV1beta2) BackingImageManagers(namespace string) v1beta2.BackingImageManagerInterface {
	return newFakeBackingImageManagers(c, namespace)
}

func (c *FakeLonghornV1beta2) Backups(namespace string) v1beta2.BackupInterface {
	return newFakeBackups(c, namespace)
}

func (c *FakeLonghornV1beta2) BackupBackingImages(namespace string) v1beta2.BackupBackingImageInterface {
	return newFakeBackupBackingImages(c, namespace)
}

func (c *FakeLonghornV1beta2) BackupTargets(namespace string) v1beta2.BackupTargetInterface {
	return newFakeBackupTargets(c, namespace)
}

func (c *FakeLonghornV1beta2) BackupVolumes(namespace string) v1beta2.BackupVolumeInterface {
	return newFakeBackupVolumes(c, namespace)
}

func (c *FakeLonghornV1beta2) Engines(namespace string) v1beta2.EngineInterface {
	return newFakeEngines(c, namespace)
}

func (c *FakeLonghornV1beta2) EngineImages(namespace string) v1beta2.EngineImageInterface {
	return newFakeEngineImages(c, namespace)
}

func (c *FakeLonghornV1beta2) InstanceManagers(namespace string) v1beta2.InstanceManagerInterface {
	return newFakeInstanceManagers(c, namespace)
}

func (c *FakeLonghornV1beta2) Nodes(namespace string) v1beta2.NodeInterface {
	return newFakeNodes(c, namespace)
}

func (c *FakeLonghornV1beta2) Orphans(namespace string) v1beta2.OrphanInterface {
	return newFakeOrphans(c, namespace)
}

func (c *FakeLonghornV1beta2) RecurringJobs(namespace string) v1beta2.RecurringJobInterface {
	return newFakeRecurringJobs(c, namespace)
}

func (c *FakeLonghornV1beta2) Replicas(namespace string) v1beta2.ReplicaInterface {
	return newFakeReplicas(c, namespace)
}

func (c *FakeLonghornV1beta2) Settings(namespace string) v1beta2.SettingInterface {
	return newFakeSettings(c, namespace)
}

func (c *FakeLonghornV1beta2) ShareManagers(namespace string) v1beta2.ShareManagerInterface {
	return newFakeShareManagers(c, namespace)
}

func (c *FakeLonghornV1beta2) Snapshots(namespace string) v1beta2.SnapshotInterface {
	return newFakeSnapshots(c, namespace)
}

func (c *FakeLonghornV1beta2) SupportBundles(namespace string) v1beta2.SupportBundleInterface {
	return newFakeSupportBundles(c, namespace)
}

func (c *FakeLonghornV1beta2) SystemBackups(namespace string) v1beta2.SystemBackupInterface {
	return newFakeSystemBackups(c, namespace)
}

func (c *FakeLonghornV1beta2) SystemRestores(namespace string) v1beta2.SystemRestoreInterface {
	return newFakeSystemRestores(c, namespace)
}

func (c *FakeLonghornV1beta2) Volumes(namespace string) v1beta2.VolumeInterface {
	return newFakeVolumes(c, namespace)
}

func (c *FakeLonghornV1beta2) VolumeAttachments(namespace string) v1beta2.VolumeAttachmentInterface {
	return newFakeVolumeAttachments(c, namespace)
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *FakeLonghornV1beta2) RESTClient() rest.Interface {
	var ret *rest.RESTClient
	return ret
}
