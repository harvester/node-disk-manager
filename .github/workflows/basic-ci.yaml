name: PR and Branch Image Build and Push

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches:
      - master
      - 'v**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  LIBVIRT_DEFAULT_URI: "qemu:///system"
  VM_DEPLOYED: false

jobs:

  basic-validateion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run validations
        run: |
          make validate
          make validate-ci

  build-and-push-temporary-images:
    needs: basic-validateion
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.tag.outputs.tag }}
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run dapper
      run: make ci

    - name: Determine image tag
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "tag=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.ref_name }}-head" >> $GITHUB_OUTPUT
        fi

    - name: Build and push controller image
      uses: docker/build-push-action@v5
      with:
        provenance: false
        context: .
        platforms: linux/amd64
        file: package/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}

    - name: Build and push webhook image
      uses: docker/build-push-action@v5
      with:
        provenance: false
        context: .
        platforms: linux/amd64
        file: package/Dockerfile.webhook
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-webhook:${{ steps.tag.outputs.tag }}

  ci-job-new-installation:
    needs: build-and-push-temporary-images
    runs-on:
      - self-hosted
      - golang
    steps:
      - name: "Clone and check"
        uses: actions/checkout@v4

      - name: "Patch Image target"
        run: |
          TAG=${{ needs.build-and-push-temporary-images.outputs.image_tag }}
          yq e -i ".image.repository = \"${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\"" ci/charts/ndm-override.yaml
          yq e -i ".image.tag = \"${TAG}\"" ci/charts/ndm-override.yaml
          yq e -i ".webhook.repository = \"${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-webhook\"" ci/charts/ndm-override.yaml
          yq e -i ".webhook.tag = \"${TAG}\"" ci/charts/ndm-override.yaml
          echo "NDM override result as below:"
          cat ci/charts/ndm-override.yaml

      - name: "Local Deployment (Harvester+Longhorn+Node-Disk-Manager) for testing"
        id: vm_deploy
        run: |
          rm -rf ndm-new-vagrant-k3s
          git clone https://github.com/bk201/vagrant-k3s ndm-new-vagrant-k3s
          pushd ndm-new-vagrant-k3s
          yq e -i ".cluster_size = 1" settings.yaml
          ./new-cluster.sh
          echo "VM_DEPLOYED=true" >> "$GITHUB_ENV"
          yq e -i ".longhorn_version = \"1.7.1\"" settings.yaml
          ./scripts/deploy_longhorn.sh
          popd

      - name: "Add disk"
        run: |
          pushd ndm-new-vagrant-k3s
          ./scripts/attach-disk.sh node1 ndm-new-vagrant-k3s
          sleep 30
          popd

      - name: "Deploy NDM"
        run: |
          pushd ndm-new-vagrant-k3s
          cp ../ci/scripts/helpers.sh ./helpers.sh
          cp ../ci/scripts/deploy_ndm_current.sh ./deploy_ndm_current.sh
          cp ../ci/charts/ndm-override.yaml ./ndm-override.yaml
          ./deploy_ndm_current.sh
          popd

      - name: "Patch NDM autoProvision"
        run: |
          pushd ndm-new-vagrant-k3s
          cp ../ci/scripts/helpers.sh ./helpers.sh
          cp ../ci/scripts/patch_ndm.sh ./patch_ndm.sh
          ./patch_ndm.sh
          popd

      - name: "Run Basic Test"
        id: basic-test
        run: |
          pushd ndm-new-vagrant-k3s
          vagrant ssh-config node1 > ../ssh-config
          cp kubeconfig ../kubeconfig
          popd
          echo Running integration tests
          NDM_HOME=`pwd` go test -v ./tests/...

      - name: "Get NDM logs"
        if: always()
        run: |
          if [ ${{ env.VM_DEPLOYED }} != 'true' ]; then
            echo "VM is not deployed, skip getting logs"
            exit 0
          fi
          ./ci/scripts/get-debug-info.sh

      - name: "Tear Down / Cleanup"
        if: always()
        run: |
          if [ ${{ env.VM_DEPLOYED }} != 'true' ]; then
            echo "VM is not deployed, skip VM destroy"
            exit 0
          fi
          rm -rf /tmp/hotplug_disks/ndm-new-vagrant-k3s
          pushd ndm-new-vagrant-k3s
          vagrant destroy -f --parallel
          popd

  ci-jobs-upgrade:
    needs: build-and-push-temporary-images
    runs-on:
      - self-hosted
      - golang
    steps:
      - name: "Clone and check"
        uses: actions/checkout@v4

      - name: "Patch Image target"
        run: |
          TAG=${{ needs.build-and-push-temporary-images.outputs.image_tag }}
          yq e -i ".image.repository = \"${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\"" ci/charts/ndm-override.yaml
          yq e -i ".image.tag = \"${TAG}\"" ci/charts/ndm-override.yaml
          yq e -i ".webhook.repository = \"${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-webhook\"" ci/charts/ndm-override.yaml
          yq e -i ".webhook.tag = \"${TAG}\"" ci/charts/ndm-override.yaml
          echo "NDM override result as below:"
          cat ci/charts/ndm-override.yaml

      - name: "Local Deployment (Harvester+Longhorn+Node-Disk-Manager) for testing"
        id: vm_deploy
        run: |
          rm -rf ndm-upgrade-vagrant-k3s
          git clone https://github.com/bk201/vagrant-k3s ndm-upgrade-vagrant-k3s
          pushd ndm-upgrade-vagrant-k3s
          yq e -i ".cluster_size = 1" settings.yaml
          ./new-cluster.sh
          echo "VM_DEPLOYED=true" >> "$GITHUB_ENV"
          yq e -i ".longhorn_version = \"1.7.1\"" settings.yaml
          ./scripts/deploy_longhorn.sh
          cp ../ci/scripts/helpers.sh ./helpers.sh
          cp ../ci/scripts/deploy_ndm_chart.sh ./deploy_ndm_chart.sh
          ./deploy_ndm_chart.sh
          popd

      - name: "Add disk"
        run: |
          pushd ndm-upgrade-vagrant-k3s
          ./scripts/attach-disk.sh node1 ndm-upgrade-vagrant-k3s
          sleep 30
          popd

      - name: "Upgrade NDM"
        run: |
          pushd ndm-upgrade-vagrant-k3s
          cp ../ci/scripts/helpers.sh ./helpers.sh
          cp ../ci/scripts/upgrade_ndm.sh ./upgrade_ndm.sh
          ./upgrade_ndm.sh
          popd

      - name: "Patch NDM autoProvision"
        run: |
          pushd ndm-upgrade-vagrant-k3s
          cp ../ci/scripts/helpers.sh ./helpers.sh
          cp ../ci/scripts/patch_ndm.sh ./patch_ndm.sh
          ./patch_ndm.sh
          popd

      - name: "Run Basic Test"
        id: basic-test
        run: |
          pushd ndm-upgrade-vagrant-k3s
          vagrant ssh-config node1 > ../ssh-config
          cp kubeconfig ../kubeconfig
          popd
          echo Running integration tests
          NDM_HOME=`pwd` go test -v ./tests/...

      - name: "Get NDM logs"
        if: always()
        run: |
          if [ ${{ env.VM_DEPLOYED }} != 'true' ]; then
            echo "VM is not deployed, skip getting logs"
            exit 0
          fi
          ./ci/scripts/get-debug-info.sh

      - name: "Tear Down / Cleanup"
        if: always()
        run: |
          if [ ${{ env.VM_DEPLOYED }} != 'true' ]; then
            echo "VM is not deployed, skip VM destroy"
            exit 0
          fi
          rm -rf /tmp/hotplug_disks/ndm-upgrade-vagrant-k3s
          pushd ndm-upgrade-vagrant-k3s
          vagrant destroy -f --parallel
          popd
